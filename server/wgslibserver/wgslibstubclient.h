/**
 * THIS FILE IS GENERATED BY jsonrpcstub, DO NOT CHANGE IT!!!!!
 */

#ifndef _WGSLIBSTUBCLIENT_H_
#define _WGSLIBSTUBCLIENT_H_

#include <jsonrpc/rpc.h>

class WGSLibStubClient
{
    public:
        WGSLibStubClient(jsonrpc::AbstractClientConnector* conn)
        {
            this->client = new jsonrpc::Client(conn);
        }
        ~WGSLibStubClient()
        {
            delete this->client;
        }

        Json::Value compute_variograms(const int& X_prop, const int& Y_prop, const int& Z_prop, const Json::Value& dimensions, const Json::Value& directions, const std::string& grid_name, const int& num_lags, const Json::Value& props, const Json::Value& props_name, const Json::Value& props_selected) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["X_prop"] = X_prop; 
p["Y_prop"] = Y_prop; 
p["Z_prop"] = Z_prop; 
p["dimensions"] = dimensions; 
p["directions"] = directions; 
p["grid_name"] = grid_name; 
p["num_lags"] = num_lags; 
p["props"] = props; 
p["props_name"] = props_name; 
p["props_selected"] = props_selected; 

            Json::Value result = this->client->CallMethod("compute_variograms",p);
    if (result.isArray())
        return result;
     else 
         throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());

        }

        void notifyServer() throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p = Json::nullValue;
            this->client->CallNotification("notifyServer",p);
        }

    private:
        jsonrpc::Client* client;
};
#endif //_WGSLIBSTUBCLIENT_H_
